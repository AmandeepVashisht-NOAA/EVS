#!/bin/bash -e

# =============================================================================
#
# NAME: JEVS_CAM_STATS
# CONTRIBUTOR(S): Marcel Caron, marcel.caron@noaa.gov, NOAA/NWS/NCEP/EMC-VPPPGB
# PURPOSE: Use ECF environment variables to define and run an EVS job
# DEPENDENCIES: $HOMEevs/ecf/cam/stats/jevs_namnest_precip_stats.ecf
#
# =============================================================================

set -xa

echo "BEGIN: $(basename ${BASH_SOURCE[0]})"

# Shell Processing Variables
export PS4='$SECONDS + '
date

# LSF id (jobid) and Temp Directories
export pid=$$
<<<<<<< HEAD
#export DATA_IN=${DATA_IN:-$DATAROOT}
#export DATA=$DATA_IN/${jobid}

export DATA=/lfs/h2/emc/ptmp/perry.shafran/EVS2/${cyc}_${MODELNAME}

=======
# in production, the following will be set to DATAROOT
#export DATA_IN=${DATA_IN:-$DATAROOT}
export DATA_IN=${DATA_IN:-$DATAROOTtmp}
export DATA=$DATA_IN/${jobid}
>>>>>>> upstream/develop
rm -rf $DATA
mkdir -p $DATA
cd $DATA

# General I/O Settings
export pgmout="OUTPUT.${pid}"
# in production the following will be set to yesterday's date
export VDATE=$(date -d "today -1 day" +"%Y%m%d")
export COMIN=${COMIN:-$(compath.py -o $NET/$evs_ver)}
# in production the following will be set using compath.py
#export COMINccpa=${COMINccpa:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINccpa=/lfs/h2/emc/ptmp/${USER}/EVS_out/com/$NET/$evs_ver/prep/$COMPONENT/$RUN
# in production the following will be set using compath.py
#export COMINmrms=${COMINmrms:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINmrms=/lfs/h2/emc/ptmp/${USER}/EVS_out/com/$NET/$evs_ver/prep/$COMPONENT/$RUN
export COMINnam=${COMINnam:-$(compath.py ${envir}/com/nam/${nam_ver})}
export COMINhiresw=${COMINhiresw:-$(compath.py ${envir}/com/hiresw/${hiresw_ver})}
export COMINhrrr=${COMINhrrr:-$(compath.py ${envir}/com/hrrr/${hrrr_ver})}
# in production, the following will be set to the approp. COMOUT dir
#export COMOUT=${COMOUT:-$(compath.py -o $NET/$evs_ver/$STEP/$COMPONENT/$RUN)}
export COMOUT=/lfs/h2/emc/ptmp/${USER}/EVS_out/com/$NET/$evs_ver/$STEP/$COMPONENT/$RUN

# Subdirectories to EVS Home Directory
export PARMevs=$HOMEevs/parm
export USHevs=$HOMEevs/ush
export EXECevs=$HOMEevs/exec
export FIXevs=$HOMEevs/fix
export SCRIPTSevs=$HOMEevs/scripts
export MET_PLUS_CONF="${PARMevs}/metplus_config/cam/precip/stats"

<<<<<<< HEAD
##################################################
# SAVEGES  - Copy Files From TMPDIR to $GESdir
# SENDECF  - Flag Events on ecFLOW
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
##################################################
export SENDCOM=${SENDCOM:-YES}
export SENDDBN=${SENDDBN:-YES}
export SENDECF=${SENDECF:-YES}

export DCOMROOT=${DCOMROOT:-/lfs/h1/ops/$envir/dcom}
export EXECevs=${EXECevs:-$HOMEevs/exec}
export FIXvevs=${FIXevs:-$HOMEevs/fix}
export PARMevs=${PARMevs:-$HOMEevs/parm}
export USHevs=${USHevs:-$HOMEevs/ush}

# Run setpdy and initialize PDY variables
setpdy.sh
. ./PDY

export VDATE=$PDYm1

# Define COMIN/COMOUT variables:

echo $COMPATH

#export COMIN=${COMIN:-$(compath.py ${envir}/com/evs/${evs_ver}/)}
export COMIN=/lfs/h2/emc/vpppg/noscrub/perry.shafran/${NET}/${evs_ver}
export COMINnam=${COMINnam:-$(compath.py ${envir}/com/${modsys}/${mod_ver})}
export COMINobs=${COMINobs:-$(compath.py ${envir}/com/obsproc/${obsproc_ver})}
export COMOUT=/lfs/h2/emc/vpppg/noscrub/perry.shafran/${NET}/${evs_ver}/${STEP}/${COMPONENT}
export COMOUTsmall=$COMOUT/${RUN}.${VDATE}/$MODELNAME/$VERIF_CASE
export COMOUTfinal=$COMOUT/${MODELNAME}.${VDATE}

#######################################################################
# Execute the script.
#######################################################################

$HOMEevs/scripts/${COMPONENT}/${STEP}/exevs_${MODELNAME}_${VERIF_CASE}_${STEP}.sh
=======
# Execute the Script
$SCRIPTSevs/$COMPONENT/$STEP/exevs_${MODELNAME}_${VERIF_CASE}_${STEP}.sh
export err=$?; err_chk
>>>>>>> upstream/develop

# Clean Up
cat $pgmout
msg="JOB $job HAS COMPLETED NORMALLY."
postmsg "$jlogfile" "$msg"
<<<<<<< HEAD

#if [ "$KEEPDATA" != "YES" ] ; then
#  cd $DATAROOT
#  rm -rf $DATA
#fi
=======
if [ "$KEEPDATA" != "YES" ] ; then
  cd $DATA_IN
  rm -rf $DATA
fi
>>>>>>> upstream/develop

echo "END: $(basename ${BASH_SOURCE[0]})"
